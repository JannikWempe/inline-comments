scalar AWSDateTime

interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  username: String!
  posts: [Post!]!
  firstCreated: AWSDateTime!
  lastUpdated: AWSDateTime
}

type Post implements Node {
  id: ID!
  title: String!
  content: String!
  author: User!
  comments: [Comment!]!
  firstCreated: AWSDateTime!
  lastUpdated: AWSDateTime
}

type Comment implements Node {
  id: ID!
  content: String!
  post: Post!
  author: User!
  #  responses: [CommentResponse!]!
  firstCreated: AWSDateTime!
  lastUpdated: AWSDateTime
}

#type CommentResponse {
#  content: String!
#  author: User!
#}

type Query {
  getUsers: [User!]!
  getUserById(userId: ID!): User
  getPosts: [Post!]!
  getPostById(postId: ID!): Post
}

input CreateUserInput {
  username: String!
}

input CreatePostInput {
  title: String!
  content: String!
  # TODO: would normally be cognito user doing request; this way someone can create act as someone else
  authorId: ID!
}

# TODO: could allow to partially update a Post
input UpdatePostInput {
  id: ID!
  title: String!
  content: String!
}

input AddCommentInput {
  postId: ID!
  # TODO: would normally be cognito user doing request; this way someone can create act as someone else
  authorId: ID!
  content: String!
}

type Mutation {
  createUser(input: CreateUserInput!): User
  createPost(input: CreatePostInput!): Post
  updatePost(input: UpdatePostInput!): Post
  addComment(input: AddCommentInput!): Comment
}
